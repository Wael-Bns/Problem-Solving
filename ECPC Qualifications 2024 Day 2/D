// Wael Benslimene DrStonee

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T>
using ordered_set = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
#ifndef ONLINE_JUDGE
#include "debug.cpp"
#endif

const long long mod=1e9+7;
const long long MOD=998244353;
#define ll long long
#define endl '\n'
#define FAST ios::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ff first
#define ss second
#define INF 1e18+5
#define yes cout<<"YES"<<endl
#define no cout<<"NO"<<endl
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()


ll binpow(ll a,ll b){ll res=1;while(b>0){if(b&1)res=(res*a);a=((a)*(a));b/=2;}return res;}
ll gcd(ll a,ll b){return b==0 ? a:gcd(b,a%b);}
ll lcm(ll a,ll b){return (a/gcd(a,b))*b;}
 

const int N=5e5+5;

int dx[]={0,1,0,-1};
int dy[]={-1,0,1,0};
int n,m;

void bfs(vector<vector<bool>> &vis,vector<vector<int>> &dist,vector<pair<int,int>> &teleports)
{
    queue<pair<int,int>> q;
    for(auto x:teleports)q.push(x);
    dist[1][1]=0;
    while(!q.empty())
    {
        pair<int,int> p=q.front();
        if(vis[p.ff][p.ss])continue;
        vis[p.ff][p.ss]=1;
        for(int i=0;i<4;i++)
        {
            int xx=p.ff+dx[i];
            int yy=p.ss+dy[i];
            if(xx>=1 && xx<=n && yy>=1 && yy<=m && !vis[xx][yy] && dist[xx][yy]>dist[p.ff][p.ss]+2)
            {
                dist[xx][yy]=dist[p.ff][p.ss]+2;
                q.push(mp(xx,yy));
            }
        }
        q.pop();
    }
}

void solve()
{
    cin>>n>>m;
    vector<vector<char>> grid(n+1,vector<char>(m+1));
    int min_teleport=1e8,x=0,y=0;
    vector<pair<int,int>> teleports;
    vector<vector<int>> dist(n+1,vector<int>(m+1,1e8));
    vector<vector<bool>> vis(n+1,vector<bool>(m+1,0));
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            cin>>grid[i][j];
            dist[i][j]=2*(i+j-2);
            if(grid[i][j]=='o')
            {
                teleports.pb(mp(i,j));
                if(2*(i+j-2)<min_teleport)
                {
                    min_teleport=2*(i+j-2);
                    x=i;
                    y=j;
                }
            }
        }
    }
    for(auto p:teleports)
    {
        if(p.ff==x && p.ss==y)
        {
            dist[x][y]=min_teleport;
        }
        else
        {
            dist[p.ff][p.ss]=min_teleport+1;
        }
    }
    bfs(vis,dist,teleports);
    cout<<dist[n][m]<<endl;
}   


int main()
{
    FAST;
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    int t=1;
    cin>>t;
    while(t--)
    {
        solve();
    }

    return 0;
}
