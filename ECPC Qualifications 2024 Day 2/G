// Wael Benslimene DrStonee

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T>
using ordered_set = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
#ifndef ONLINE_JUDGE
#include "debug.cpp"
#endif

const long long mod=1e9+7;
const long long MOD=998244353;
#define ll long long
#define endl '\n'
#define FAST ios::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ff first
#define ss second
#define INF 1e18+5
#define yes cout<<"YES"<<endl
#define no cout<<"NO"<<endl
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()


ll binpow(ll a,ll b){ll res=1;while(b>0){if(b&1)res=(res*a)%mod;a=((a)*(a))%mod;b/=2;}return res;}
ll gcd(ll a,ll b){return b==0 ? a:gcd(b,a%b);}
ll lcm(ll a,ll b){return (a/gcd(a,b))*b;}
 

const int N=1e6+5;

ll f[N],inv[N];
bool sieve[N];
vector<int> primes;

ll C(int k,int n)
{
    if(k>n)return 0;
    return (f[n]*((inv[n-k]*inv[k])%mod))%mod;
}

void build()
{
    f[1]=f[0]=1;
    inv[0]=inv[1]=1;
    for(int i=2;i<N;i++)
    {
        f[i]=(f[i-1]*i)%mod;
        inv[i]=binpow(f[i],mod-2);
    }
    for(int i=2;i<N;i++)
    {
        if(sieve[i])continue;
        primes.pb(i);
        for(int j=i;j<N;j+=i)sieve[j]=1;
    }
}

void solve()
{
    int n;cin>>n; 
    ll ans=0;
    for(int i=0;i<primes.size();i++)
    {
        if(primes[i]<=n)
        {
            ans=(ans+C(primes[i],n))%mod;
        }
        else{
            break;
        }
    }
    cout<<ans<<endl;
}   


int main()
{
    FAST;
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    int t=1;
    build();
    cin>>t;
    while(t--)
    {
        solve();
    }

    return 0;
}
