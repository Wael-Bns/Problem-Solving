// Wael Benslimene DrStonee

#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T>
using ordered_set = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;
#ifndef ONLINE_JUDGE
#include "debug.cpp"
#endif

const long long mod=1e9+7;
const long long MOD=998244353;
#define ll long long
#define endl '\n'
#define FAST ios::sync_with_stdio(false);cin.tie(0);cout.tie(0)
#define ff first
#define ss second
#define INF 1e18+5
#define yes cout<<"YES"<<endl
#define no cout<<"NO"<<endl
#define pb push_back
#define mp make_pair
#define all(x) (x).begin(),(x).end()
#define rall(x) (x).rbegin(),(x).rend()


ll binpow(ll a,ll b){ll res=1;while(b>0){if(b&1)res=(res*a);a=((a)*(a));b/=2;}return res;}
ll gcd(ll a,ll b){return b==0 ? a:gcd(b,a%b);}
ll lcm(ll a,ll b){return (a/gcd(a,b))*b;}
 

const int N=1e5+5;

vector<int> adj[N];
bool vis[N];
int dist[N],op1=0;

int dfs(int v,int par)
{
    vis[v]=1;
    int res=N;
    for(int u:adj[v])
    {
        if(!vis[u])
        {
            dist[u]=dist[v]+1;
            res=min(res,dfs(u,v));
        }
        else if(vis[u] && u!=par)
        {
            res=min(res,dist[u]);
        }
    }
    if(res>=dist[v])op1++;
    return res;
}

void solve()
{
    int n,m,x;cin>>n>>m>>x;
    for(int i=1;i<=n;i++)adj[i].clear(),vis[i]=0,dist[i]=0;
    for(int i=0;i<m;i++)
    {
        int u,v;cin>>u>>v;
        adj[u].pb(v);
        adj[v].pb(u);
    }   
    int connected=0;
    op1=0;
    for(int i=1;i<=n;i++)
    {
        if(!vis[i])
        {
            connected++;
            int trash=dfs(i,0);
        }
    }
    if(connected>x)
    {
        cout<<-1<<endl;
    }
    else
    {   
        op1-=connected;
        op1=min(op1,x-connected);
        connected+=op1;
        int op2=x-connected;
        cout<<op1+op2<<endl;
        cout<<op1<<" "<<op2<<endl;
    }
}   


int main()
{
    FAST;
    #ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
    #endif
    int t=1;
    cin>>t;
    while(t--)
    {
        solve();
    }

    return 0;
}
